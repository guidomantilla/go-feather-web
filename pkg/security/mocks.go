// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/guidomantilla/go-feather-web/pkg/security (interfaces: AuthenticationEndpoint,AuthenticationService,AuthenticationDelegate,AuthorizationFilter,AuthorizationService,AuthorizationDelegate,PrincipalManager,TokenManager)

// Package security is a generated GoMock package.
package security

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticationEndpoint is a mock of AuthenticationEndpoint interface.
type MockAuthenticationEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationEndpointMockRecorder
}

// MockAuthenticationEndpointMockRecorder is the mock recorder for MockAuthenticationEndpoint.
type MockAuthenticationEndpointMockRecorder struct {
	mock *MockAuthenticationEndpoint
}

// NewMockAuthenticationEndpoint creates a new mock instance.
func NewMockAuthenticationEndpoint(ctrl *gomock.Controller) *MockAuthenticationEndpoint {
	mock := &MockAuthenticationEndpoint{ctrl: ctrl}
	mock.recorder = &MockAuthenticationEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationEndpoint) EXPECT() *MockAuthenticationEndpointMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationEndpoint) Authenticate(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authenticate", arg0)
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationEndpointMockRecorder) Authenticate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationEndpoint)(nil).Authenticate), arg0)
}

// MockAuthenticationService is a mock of AuthenticationService interface.
type MockAuthenticationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceMockRecorder
}

// MockAuthenticationServiceMockRecorder is the mock recorder for MockAuthenticationService.
type MockAuthenticationServiceMockRecorder struct {
	mock *MockAuthenticationService
}

// NewMockAuthenticationService creates a new mock instance.
func NewMockAuthenticationService(ctrl *gomock.Controller) *MockAuthenticationService {
	mock := &MockAuthenticationService{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationService) EXPECT() *MockAuthenticationServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationService) Authenticate(arg0 context.Context, arg1 *Principal) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationServiceMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationService)(nil).Authenticate), arg0, arg1)
}

// MockAuthenticationDelegate is a mock of AuthenticationDelegate interface.
type MockAuthenticationDelegate struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationDelegateMockRecorder
}

// MockAuthenticationDelegateMockRecorder is the mock recorder for MockAuthenticationDelegate.
type MockAuthenticationDelegateMockRecorder struct {
	mock *MockAuthenticationDelegate
}

// NewMockAuthenticationDelegate creates a new mock instance.
func NewMockAuthenticationDelegate(ctrl *gomock.Controller) *MockAuthenticationDelegate {
	mock := &MockAuthenticationDelegate{ctrl: ctrl}
	mock.recorder = &MockAuthenticationDelegateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationDelegate) EXPECT() *MockAuthenticationDelegateMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationDelegate) Authenticate(arg0 context.Context, arg1 *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationDelegateMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationDelegate)(nil).Authenticate), arg0, arg1)
}

// MockAuthorizationFilter is a mock of AuthorizationFilter interface.
type MockAuthorizationFilter struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationFilterMockRecorder
}

// MockAuthorizationFilterMockRecorder is the mock recorder for MockAuthorizationFilter.
type MockAuthorizationFilterMockRecorder struct {
	mock *MockAuthorizationFilter
}

// NewMockAuthorizationFilter creates a new mock instance.
func NewMockAuthorizationFilter(ctrl *gomock.Controller) *MockAuthorizationFilter {
	mock := &MockAuthorizationFilter{ctrl: ctrl}
	mock.recorder = &MockAuthorizationFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationFilter) EXPECT() *MockAuthorizationFilterMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizationFilter) Authorize(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authorize", arg0)
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizationFilterMockRecorder) Authorize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizationFilter)(nil).Authorize), arg0)
}

// MockAuthorizationService is a mock of AuthorizationService interface.
type MockAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceMockRecorder
}

// MockAuthorizationServiceMockRecorder is the mock recorder for MockAuthorizationService.
type MockAuthorizationServiceMockRecorder struct {
	mock *MockAuthorizationService
}

// NewMockAuthorizationService creates a new mock instance.
func NewMockAuthorizationService(ctrl *gomock.Controller) *MockAuthorizationService {
	mock := &MockAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationService) EXPECT() *MockAuthorizationServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizationService) Authorize(arg0 context.Context, arg1 string) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0, arg1)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizationServiceMockRecorder) Authorize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizationService)(nil).Authorize), arg0, arg1)
}

// MockAuthorizationDelegate is a mock of AuthorizationDelegate interface.
type MockAuthorizationDelegate struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationDelegateMockRecorder
}

// MockAuthorizationDelegateMockRecorder is the mock recorder for MockAuthorizationDelegate.
type MockAuthorizationDelegateMockRecorder struct {
	mock *MockAuthorizationDelegate
}

// NewMockAuthorizationDelegate creates a new mock instance.
func NewMockAuthorizationDelegate(ctrl *gomock.Controller) *MockAuthorizationDelegate {
	mock := &MockAuthorizationDelegate{ctrl: ctrl}
	mock.recorder = &MockAuthorizationDelegateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationDelegate) EXPECT() *MockAuthorizationDelegateMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizationDelegate) Authorize(arg0 context.Context, arg1 *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizationDelegateMockRecorder) Authorize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizationDelegate)(nil).Authorize), arg0, arg1)
}

// MockPrincipalManager is a mock of PrincipalManager interface.
type MockPrincipalManager struct {
	ctrl     *gomock.Controller
	recorder *MockPrincipalManagerMockRecorder
}

// MockPrincipalManagerMockRecorder is the mock recorder for MockPrincipalManager.
type MockPrincipalManagerMockRecorder struct {
	mock *MockPrincipalManager
}

// NewMockPrincipalManager creates a new mock instance.
func NewMockPrincipalManager(ctrl *gomock.Controller) *MockPrincipalManager {
	mock := &MockPrincipalManager{ctrl: ctrl}
	mock.recorder = &MockPrincipalManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrincipalManager) EXPECT() *MockPrincipalManagerMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockPrincipalManager) ChangePassword(arg0 context.Context, arg1 *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockPrincipalManagerMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockPrincipalManager)(nil).ChangePassword), arg0, arg1)
}

// Create mocks base method.
func (m *MockPrincipalManager) Create(arg0 context.Context, arg1 *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPrincipalManagerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPrincipalManager)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPrincipalManager) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPrincipalManagerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPrincipalManager)(nil).Delete), arg0, arg1)
}

// Exists mocks base method.
func (m *MockPrincipalManager) Exists(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockPrincipalManagerMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPrincipalManager)(nil).Exists), arg0, arg1)
}

// Find mocks base method.
func (m *MockPrincipalManager) Find(arg0 context.Context, arg1 string) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPrincipalManagerMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPrincipalManager)(nil).Find), arg0, arg1)
}

// Update mocks base method.
func (m *MockPrincipalManager) Update(arg0 context.Context, arg1 *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPrincipalManagerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPrincipalManager)(nil).Update), arg0, arg1)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokenManager) Generate(arg0 *Principal) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenManagerMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokenManager)(nil).Generate), arg0)
}

// Validate mocks base method.
func (m *MockTokenManager) Validate(arg0 string) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenManagerMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenManager)(nil).Validate), arg0)
}
